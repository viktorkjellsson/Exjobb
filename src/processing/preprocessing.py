
import numpy as np
from src.processing import remove_outliers
from src.processing import nan_regions #nan_regions.py
from src.processing import shift_region
from src.processing import interpolate_nan #interpolate_nan.py
from sklearn.preprocessing import MinMaxScaler
import pandas as pd

def preprocessing_pipeline(df, interpolate_threshold):

    # Remove zeros and outliers
    df = remove_outliers.clean_zeros_outliers(df)

    # Find consecutive NaN regions
    threshold = 1 # Choose the threshold(s) for consecutive NaNs
    consecutive_nan_regions, nan_regions_sorted = nan_regions.find_nan_regions(df, threshold)

    # Shift regions 
    # n_points = 20
    # std_multiplier = 4.6
    # min_region_size = 5

    # df = shift_region.shift_scale_diff(df, std_multiplier, n_points, n_points, min_region_size)

    df_filled = interpolate_nan.interpolate(df, nan_regions_sorted, interpolate_threshold)

    df = df_filled

    # Add function that scales the data here

    # scaler = MinMaxScaler()
    # df['Strain'] = scaler.fit_transform(df[['Strain']])
    # df['Temperature'] = scaler.fit_transform(df[['Temperature']])

    return df


def add_features(df, column="Strain", window=6):
    """
    Adds time-series features: rolling mean, variance, standard deviation.

    Args:
        df (pd.DataFrame): Input dataframe.
        column (str): Column to apply rolling statistics to.
        window (int): Rolling window size.

    Returns:
        pd.DataFrame: Dataframe with added features.
    """
    df["Rolling_mean"] = df[column].rolling(window=window).mean()
    df["Rolling_var"] = df[column].rolling(window=window).var()
    df["Rolling_std"] = df[column].rolling(window=window).std()
    
    # Fill NaN values generated by rolling functions
    df.fillna(method="bfill", inplace=True)
    
    return df