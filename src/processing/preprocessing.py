from src.processing import remove_outliers
from src.processing import nan_regions #nan_regions.py
from src.processing import shift_region
from src.processing import interpolate_nan #interpolate_nan.py

def preprocessing_pipeline(df, interpolate_threshold):
    """Preprocessing pipeline for the data.
    This function applies a series of preprocessing steps to the input dataframe, including:
    1. Removing zeros and outliers
    2. Finding consecutive NaN regions
    3. Interpolating NaN values


    Normalization is not included in this pipeline, as it is handled separately for each feature in the dataset creation.
    Shifting of the data is also not included in this pipeline, as it has been done manually. 

    Args:
        df (pd.DataFrame): The input dataframe to be preprocessed.
        interpolate_threshold (int): The threshold for the number of consequtive NaNs for interpolation.

    Returns:
        df (pd.DataFrame): The preprocessed dataframe.
    """

    # Remove zeros and outliers
    df = remove_outliers.clean_zeros_outliers(df, k=1.5, window=100, step=20) #for training data
    # df = remove_outliers.clean_zeros_outliers(df, k=3, window=100, step=20) #for test data

    # Find consecutive NaN regions
    threshold = 1 # Choose the threshold(s) for consecutive NaNs
    consecutive_nan_regions, nan_regions_sorted = nan_regions.find_nan_regions(df, threshold)

    # Shift regions 
    n_points = 20
    std_multiplier = 4.6
    min_region_size = 5

    # df = shift_region.shift_scale_diff(df, std_multiplier, n_points, n_points, min_region_size)

    df_filled = interpolate_nan.interpolate(df, nan_regions_sorted, interpolate_threshold)

    df = df_filled

    return df


def add_features(df, column="Strain", window=6):
    """
    Adds time-series features: rolling mean, variance and standard deviation.

    Args:
        df (pd.DataFrame): Input dataframe.
        column (str): Column to apply rolling statistics to.
        window (int): Rolling window size.

    Returns:
        df (pd.DataFrame): Dataframe with added features.
    """
    df["Rolling_mean"] = df[column].rolling(window=window).mean()
    df["Rolling_var"] = df[column].rolling(window=window).var()
    df["Rolling_std"] = df[column].rolling(window=window).std()
    
    # Fill NaN values generated by rolling functions
    # df.fillna(method="bfill", inplace=True)
    
    return df